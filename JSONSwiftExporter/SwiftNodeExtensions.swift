//
//  SwiftNodeExtensions.swift
//  JSONSwiftExporter
//
//  Created by Jonathan French on 9.03.23.
//

import Foundation

extension SwiftNode {
  
    fileprivate func swiftHeader(_ swiftString: inout String) {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MMM dd, yyyy"
        let todaysDate = dateFormatter.string(from: Date())
        swiftString += "//" + "\n"
        swiftString += "// \(nodeName).swift" + "\n"
        swiftString += "//" + "\n"
        swiftString += "// Generated by JSONSwiftExporter on \(todaysDate)" + "\n"
        swiftString += "//" + "\n\n"
        swiftString += "import Foundation" + "\n\n"
    }
    
    fileprivate func swiftDec(prop: SwiftNodeProperties) -> String {
        if prop.propertyType == .Array {
            return "\("[" + prop.childNode!.nodeName + "]")"
        }
        else if prop.propertyType == .Struct {
            return "\(prop.childNode!.nodeName)"
        } else {
            return "\(prop.propertyType.simpleDescription)"
        }
    }
    
    fileprivate func swiftStruct(_ swiftString: inout String, props: [SwiftNodeProperties]) {
        swiftString += "\(isPublic ? "public " : "")struct \(nodeName): Codable {" + "\n\n"
        props.forEach {
            swiftString += "\tpublic \($0.isVar ? "var" : "let") \($0.hasCodingKey ? $0.codingKey : $0.propertyName): \(swiftDec(prop: $0))\($0.isOptional ? "?" : "") " + "\n"
        }
        ///If any of our properties has a coding key then add them to struct.
        if properties.contains(where: {$0.hasCodingKey == true }) {
            swiftCodingKeys(&swiftString)
        }
        swiftString += "}" + "\n\n"
        ///If any node has a child node then add them.
        props.forEach {
            if let child = $0.childNode {
                child.swiftStruct(&swiftString,props: child.properties)
            }
        }
    }
    
    fileprivate func swiftCodingKeys(_ swiftString: inout String) {
        swiftString += "\n\tenum CodingKeys: String, CodingKey {" + "\n"
        swiftString += "\tcase " //+ "\n\t"
        properties.forEach {
            swiftString += "\($0.hasCodingKey ? "" : $0.propertyName + ",") "
        }
        swiftString.removeLast(2)
        swiftString += "\t\n"
        properties.forEach {
            if $0.hasCodingKey {
                swiftString += "\tcase \($0.propertyName) = \"\($0.codingKey)\" \n"
            }
        }
        swiftString += "\t}" + "\n"
    }
    
    func generateSwiftCode() -> String {
        var swiftString = ""
        swiftHeader(&swiftString)
        swiftStruct(&swiftString,props: properties)
        /// Add in test or code to process the json into the structure.
        if (addFetch) {
            swiftString += generateRequestCode()
        }
        
        if generateTest {
            swiftString += generateTestCode()
        }
        return swiftString
    }
    
    func generateRequestCode() -> String {
        let nodes = isArray ? "[\(nodeName)]" : "\(nodeName)"
        let snakes = snakeCase ? "decoder.keyDecodingStrategy = .convertFromSnakeCase" : ""
        let requestString = """

    /// Probably want to move this somewhere else just the once and add in some more code!
    /// But it's all your code so cut copy paste or whatever. This'll load your Json into your structure.

    public struct fetchRequests {
        public init() {
        }
    }

    /// As here we add an extension to the above for the \(nodeName) processing
    \n\nextension fetchRequests {

        public func fetch\(nodeName)(jsonString: String) -> \(nodes) {
            let decoder = JSONDecoder()
            let jsonData = jsonString.data(using: .utf8)!
            \(snakes)
            let parseJson: \(nodes) = try! decoder.decode(\(nodes).self, from: jsonData)
            return parseJson
        }
    }\n\n
"""
        return requestString
    }
    
    func generateTestCode() -> String {
        let testString = """
// Copy n Paste or load this whole file into a playground
// Replace all the boiler plate code and hit run.

    let testData = \"\"\"
        \(testJson)
    \"\"\"
  
import UIKit
import PlaygroundSupport

class MyViewController : UIViewController {
    override func loadView() {
        let view = UIView()
        view.backgroundColor = .white

        let label = UILabel()
        label.frame = CGRect(x: 10, y: 10, width: 300, height: 400)
        label.textColor = .black
        
        view.addSubview(label)
        self.view = view
        
        let test = fetchRequests()
        let responseStruct = test.fetch\(nodeName)(jsonString: testData)
        label.text = String(describing:responseStruct)
    }
}
PlaygroundPage.current.liveView = MyViewController()

"""
        return testString
    }
}
